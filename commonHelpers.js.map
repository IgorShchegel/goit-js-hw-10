{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst buttonStart = document.querySelector('button[data-start]');\nconst daysTimer = document.querySelector('[data-days]');\nconst hoursTimer = document.querySelector('[data-hours]');\nconst minutesTimer = document.querySelector('[data-minutes]');\nconst secondsTimer = document.querySelector('[data-seconds]');\n\nlet userSelectedDate;\nconst currentDate = new Date();\nbuttonStart.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose: function (selectedDates) {\n    userSelectedDate = selectedDates[0];\n\n    if (userSelectedDate.getTime() <= currentDate.getTime()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topCenter',\n      });\n      buttonStart.disabled = true;\n    } else {\n      buttonStart.disabled = false;\n    }\n  },\n};\n\nbuttonStart.addEventListener('click', () => {\n  buttonStart.disabled = true;\n  const countdown = setInterval(e => {\n    const timeDifference = userSelectedDate.getTime() - Date.now();\n    if (timeDifference <= 0) {\n      clearInterval(countdown);\n      displayTime(0);\n      return;\n    }\n    const timeParts = convertMs(timeDifference);\n    displayTime(\n      timeParts.days,\n      timeParts.hours,\n      timeParts.minutes,\n      timeParts.seconds\n    );\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction displayTime(days, hours, minutes, seconds) {\n  daysTimer.textContent = addLeadingZero(days);\n  hoursTimer.textContent = addLeadingZero(hours);\n  minutesTimer.textContent = addLeadingZero(minutes);\n  secondsTimer.textContent = addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, '0');\n}\n\nflatpickr('#datetime-picker', options);\n"],"names":["buttonStart","daysTimer","hoursTimer","minutesTimer","secondsTimer","userSelectedDate","currentDate","options","selectedDates","iziToast","countdown","e","timeDifference","displayTime","timeParts","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","flatpickr"],"mappings":"+IAKA,MAAMA,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAY,SAAS,cAAc,aAAa,EAChDC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EACJ,MAAMC,EAAc,IAAI,KACxBN,EAAY,SAAW,GAEvB,MAAMO,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAS,SAAUC,EAAe,CAChCH,EAAmBG,EAAc,GAE7BH,EAAiB,QAAO,GAAMC,EAAY,QAAO,GACnDG,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,WAClB,CAAO,EACDT,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEAA,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvB,MAAMU,EAAY,YAAYC,GAAK,CACjC,MAAMC,EAAiBP,EAAiB,QAAS,EAAG,KAAK,IAAG,EAC5D,GAAIO,GAAkB,EAAG,CACvB,cAAcF,CAAS,EACvBG,EAAY,CAAC,EACb,MACD,CACD,MAAMC,EAAYC,EAAUH,CAAc,EAC1CC,EACEC,EAAU,KACVA,EAAU,MACVA,EAAU,QACVA,EAAU,OAChB,CACG,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUC,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASP,EAAYI,EAAMC,EAAOC,EAASC,EAAS,CAClDnB,EAAU,YAAcoB,EAAeJ,CAAI,EAC3Cf,EAAW,YAAcmB,EAAeH,CAAK,EAC7Cf,EAAa,YAAckB,EAAeF,CAAO,EACjDf,EAAa,YAAciB,EAAeD,CAAO,CACnD,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAEAC,EAAU,mBAAoBhB,CAAO"}